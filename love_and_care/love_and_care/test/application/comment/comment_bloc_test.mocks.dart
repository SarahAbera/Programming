// Mocks generated by Mockito 5.4.1 from annotations
// in love_and_care/test/application/comment/comment_bloc_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:love_and_care/domain/comment/comment_model.dart'
    as _i5;
import 'package:love_and_care/infrastructure/comment/comment_repository.dart'
    as _i3;
import 'package:love_and_care/infrastructure/response.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CommentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentRepository extends _i1.Mock implements _i3.CommentRepository {
  MockCommentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response<List<_i5.Comment>>> getOpportunityComments(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOpportunityComments,
          [id],
        ),
        returnValue: _i4.Future<_i2.Response<List<_i5.Comment>>>.value(
            _FakeResponse_0<List<_i5.Comment>>(
          this,
          Invocation.method(
            #getOpportunityComments,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Response<List<_i5.Comment>>>);
  @override
  _i4.Future<_i2.Response<_i5.Comment>> CreateComment(
    String? opportunityId,
    String? comment,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #CreateComment,
          [
            opportunityId,
            comment,
          ],
        ),
        returnValue: _i4.Future<_i2.Response<_i5.Comment>>.value(
            _FakeResponse_0<_i5.Comment>(
          this,
          Invocation.method(
            #CreateComment,
            [
              opportunityId,
              comment,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Response<_i5.Comment>>);
  @override
  _i4.Future<_i2.Response<_i5.Comment>> UpdateComment(_i5.Comment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #UpdateComment,
          [comment],
        ),
        returnValue: _i4.Future<_i2.Response<_i5.Comment>>.value(
            _FakeResponse_0<_i5.Comment>(
          this,
          Invocation.method(
            #UpdateComment,
            [comment],
          ),
        )),
      ) as _i4.Future<_i2.Response<_i5.Comment>>);
  @override
  _i4.Future<_i2.Response<String>> DeleteComment(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #DeleteComment,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.Response<String>>.value(_FakeResponse_0<String>(
          this,
          Invocation.method(
            #DeleteComment,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Response<String>>);
}
